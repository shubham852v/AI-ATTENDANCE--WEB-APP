// src/components/AttendanceLog.jsx
import React, { useState, useEffect, useCallback } from 'react';
// Import Firestore functions for real-time data listening
import { onSnapshot, collection, query } from 'firebase/firestore';
// IMPORTANT: Ensure the folder 'api' and file 'geminiApi.jsx'
// on your file system have the EXACT same casing as below.
import { generateAttendanceSummary, generateWelcomeMessage } from '../api/geminiApi.jsx';

function AttendanceLog({ db, userId, setMessage }) {
  // State to store the fetched attendance records
  const [attendanceLogs, setAttendanceLogs] = useState([]);
  // State for the attendance summary text generated by LLM
  const [summaryMessage, setSummaryMessage] = useState('');
  // State to track if summary generation is in progress
  const [isSummarizing, setIsSummarizing] = useState(false);
  // State for the personalized welcome message generated by LLM
  const [welcomeMessage, setWelcomeMessage] = useState('');
  // State to track if welcome message generation is in progress
  const [isGeneratingWelcome, setIsGeneratingWelcome] = useState(false);

  // Effect hook to fetch attendance logs in real-time from Firestore
  useEffect(() => {
    // Ensure 'db' (Firestore instance) and 'userId' are available before attempting to fetch
    if (db && userId) {
      // Get 'appId' from Vite's environment variables for constructing the Firestore path
      const appId = import.meta.env.VITE_FIREBASE_APP_ID || 'default-app-id'; // Fallback for safety

      // Construct the Firestore collection reference for public attendance data
      const attendanceCollectionRef = collection(db, `artifacts/${appId}/public/data/attendance`);
      const q = query(attendanceCollectionRef); // Create a query to listen to the collection

      // Set up a real-time listener using onSnapshot. This callback fires immediately and on every update.
      const unsubscribe = onSnapshot(q, (snapshot) => {
        const logs = [];
        // Iterate through each document in the snapshot and add it to the logs array
        snapshot.forEach((doc) => {
          logs.push({ id: doc.id, ...doc.data() });
        });
        // Sort logs by timestamp in descending order (most recent first)
        logs.sort((a, b) => {
          // Safely access timestamp and convert to a number for comparison
          const tsA = b.timestamp && typeof b.timestamp.toDate === 'function' ? b.timestamp.toDate().getTime() : 0;
          const tsB = a.timestamp && typeof a.timestamp.toDate === 'function' ? a.timestamp.toDate().getTime() : 0;
          return tsA - tsB;
        });
        setAttendanceLogs(logs); // Update the state with the sorted logs
      }, (error) => {
        // Error handler for the snapshot listener
        console.error("Error fetching attendance logs:", error);
        setMessage("Failed to load attendance logs."); // Display user-friendly error message
      });

      // Cleanup function: unsubscribe from the Firestore listener when the component unmounts
      return () => unsubscribe();
    }
  }, [db, userId, setMessage]); // Dependencies: re-run if 'db', 'userId', or 'setMessage' changes

  // Function to handle generating attendance summary using the LLM (memoized with useCallback)
  const handleGenerateSummary = useCallback(async () => {
    if (attendanceLogs.length === 0) {
      setSummaryMessage("No attendance records to summarize yet.");
      return;
    }

    setIsSummarizing(true); // Set summarizing status to true for UI feedback
    setSummaryMessage("Generating attendance summary..."); // Update user message

    try {
      // Call the LLM utility function to generate the summary
      const summary = await generateAttendanceSummary(attendanceLogs);
      setSummaryMessage(summary); // Display the generated summary
    } catch (error) {
      console.error("Error generating summary:", error); // Log detailed error
      setSummaryMessage(`Error generating summary: ${error.message}.`); // Display user-friendly error
    } finally {
      setIsSummarizing(false); // Reset summarizing status
    }
  }, [attendanceLogs]); // Dependency: 'attendanceLogs' ensures summary is based on current data

  // Function to handle generating a personalized welcome message using the LLM (memoized with useCallback)
  const handleGenerateWelcome = useCallback(async (personName) => {
    setIsGeneratingWelcome(true); // Set generation status to true
    setWelcomeMessage(`Generating welcome message for ${personName}...`); // Update user message

    try {
      // Call the LLM utility function to generate the welcome message
      const message = await generateWelcomeMessage(personName);
      setWelcomeMessage(`Welcome Message for ${personName}: ${message}`); // Display the generated message
    } catch (error) {
      console.error("Error generating welcome message:", error); // Log detailed error
      setWelcomeMessage(`Error generating welcome message: ${error.message}.`); // Display user-friendly error
    } finally {
      setIsGeneratingWelcome(false); // Reset generation status
    }
  }, []); // No specific dependencies needed here as 'personName' is an argument

  // Effect hook to automatically clear the summary message after a set duration
  useEffect(() => {
    if (summaryMessage && !isSummarizing) {
      const timer = setTimeout(() => {
        setSummaryMessage(''); // Clear message after 10 seconds
      }, 10000);
      return () => clearTimeout(timer); // Cleanup timer
    }
  }, [summaryMessage, isSummarizing]); // Re-runs if message or summarizing status changes

  // Effect hook to automatically clear the welcome message after a set duration
  useEffect(() => {
    if (welcomeMessage && !isGeneratingWelcome) {
      const timer = setTimeout(() => {
        setWelcomeMessage(''); // Clear message after 10 seconds
      }, 10000);
      return () => clearTimeout(timer); // Cleanup timer
    }
  }, [welcomeMessage, isGeneratingWelcome]); // Re-runs if message or generation status changes

  return (
    <div className="bg-gray-800 rounded-xl shadow-lg p-4 sm:p-6 w-full max-w-2xl">
      <h2 className="text-xl sm:text-2xl font-semibold mb-4 text-center">Attendance Log</h2>
      {attendanceLogs.length === 0 ? (
        <p className="text-center text-gray-400">No attendance records yet. Capture an image to log one!</p>
      ) : (
        <>
          {/* Button to trigger LLM attendance summary generation */}
          <div className="mb-4 text-center">
            <button
              onClick={handleGenerateSummary}
              disabled={isSummarizing || attendanceLogs.length === 0} // Disable if summarizing or no logs
              className="bg-teal-600 hover:bg-teal-700 text-white font-bold py-2 px-4 rounded-lg shadow-md transition-all duration-200 ease-in-out transform hover:scale-105 active:scale-95 flex items-center justify-center mx-auto disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSummarizing ? (
                // Spinner icon when summarizing
                <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
              ) : (
                <span className="text-xl mr-2">âœ¨</span> // Sparkle emoji
              )}
              {isSummarizing ? 'Summarizing...' : 'Generate Attendance Summary'}
            </button>
          </div>

          {/* Display area for the attendance summary from LLM */}
          {summaryMessage && (
            <div className="mt-4 mb-6 p-3 bg-blue-700 bg-opacity-70 rounded-lg text-sm italic text-blue-100 whitespace-pre-wrap">
              {summaryMessage}
            </div>
          )}

          {/* Display area for the personalized welcome message from LLM */}
          {welcomeMessage && (
            <div className="mt-4 mb-6 p-3 bg-green-700 bg-opacity-70 rounded-lg text-sm italic text-green-100 whitespace-pre-wrap">
              {welcomeMessage}
            </div>
          )}

          {/* Grid to display individual attendance log entries */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {attendanceLogs.map((log) => (
              <div key={log.id} className="bg-gray-700 rounded-lg p-3 flex flex-col items-center text-center shadow-md">
                {/* Display captured image for each log entry */}
                {log.image && (
                  <img
                    src={log.image}
                    alt={log.personName || "Attendee"}
                    className="w-full h-32 object-cover rounded-md mb-2 border border-gray-600"
                    // Fallback image in case the base64 image fails to load
                    onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/128x128/333/fff?text=No+Image"; }}
                  />
                )}
                {/* Person's name and attendance timestamp */}
                <p className="font-semibold text-lg">{log.personName || "Unknown Person"}</p>
                <p className="text-sm text-gray-400">
                  {/* Convert Firestore timestamp to a readable local string */}
                  {log.timestamp ? new Date(log.timestamp.toDate()).toLocaleString() : 'Loading Date...'}
                </p>
                {/* User ID who logged the attendance */}
                <p className="text-xs text-gray-500 break-all mt-1">Logged by: {log.loggedByUserId}</p>
                {/* Button to generate personalized welcome message, only if personName exists */}
                {log.personName && (
                  <button
                    onClick={() => handleGenerateWelcome(log.personName)}
                    disabled={isGeneratingWelcome} // Disable while message is generating
                    className="mt-2 bg-pink-600 hover:bg-pink-700 text-white text-xs py-1 px-2 rounded-lg shadow-sm transition-all duration-200 ease-in-out transform hover:scale-105 active:scale-95 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isGeneratingWelcome ? (
                      // Spinner icon when generating
                      <svg className="animate-spin h-4 w-4 mr-1 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    ) : (
                      <span className="text-lg mr-1">âœ¨</span> // Sparkle emoji
                    )}
                    Welcome Message
                  </button>
                )}
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default AttendanceLog;
